#ifndef LEPP3_SPLIT_APPROXIMATOR_H__
#define LEPP3_SPLIT_APPROXIMATOR_H__

#include "lepp3/Typedefs.hpp"
#include "lepp3/obstacles/object_approximator/ObjectApproximator.hpp"
#include "SplitStrategy.hpp"

namespace lepp {

/**
 * An approximator implementation that will generate an approximation by
 * splitting the given object into multiple parts. Each part approximation is
 * generated by delegating to a wrapped `ObjectApproximator` instance, allowing
 * clients to vary the algorithm used for approximations, while keeping the
 * logic of incrementally splitting up the object.
 */
class SplitObjectApproximator : public ObjectApproximator {
public:
  /**
   * Create a new `SplitObjectApproximator` that will approximate each part by
   * using the given approximator instance and perform splits decided by the
   * given `SplitStrategy` instance.
   */
  SplitObjectApproximator(
        boost::shared_ptr<ObjectApproximator > approx,
        boost::shared_ptr<SplitStrategy> splitter);

  ObjectModelPtr approximate(
      const PointCloudConstPtr& point_cloud);
private:
  /**
   * An `ObjectApproximator` used to generate approximations for object parts.
   */
  boost::shared_ptr<ObjectApproximator> approximator_;
  /**
   * The strategy to be used for splitting point clouds.
   */
  boost::shared_ptr<SplitStrategy> splitter_;
};

}  // namespace lepp
#endif
