# This is a sample of a config file for the vision subsystem (when running
# it with the `--cfg` flag).
# The config file is in the [toml](https://github.com/toml-lang/toml) format,

# All IPs and ports given in here are the defaults for a lab setup.

# Mandatory options are given, optional options are commented out
# and listed with the default values

# This defines the pose service to use.
# Requirements: None
[PoseService]
ip = "192.168.0.8"
port = 53249        # default value is hexadecimal 0xd001

# Video source
[VideoSource]
# Common options:
#   - `type`: "stream", "oni", "pcd", "am_offline"
# `oni` and `pcd` types require an additional parameter: file_path
# `am_offline` type requires an additional parameters: dir_path
type = "stream"
#file_path = "path/to/file"
#dir_path = "path/to/folder"
#enable_rgb = false  # Capture RGB images
#enable_pose = false  # Replay pose data (only am_offline, [PoseService] must be disabled)

# This sets up the filtered source, which will be passed to all
# steps requiring a video
[FilteredVideoSource]
# Pre-filters are applied before pointfilters take effect
# * downsample: reduces the size of the pointcloud by merging neighboring voxels
pre_filter = "downsample"

# Post-filters are applied after the point filters
# options: "prob", "pt1"; These options activate 'source' or 'raw-data' filters.
# For the two options, a voxel grid (or environment map) in world coordinates is created,
# consisting of a big 3D matrix, which is used as a filtered point cloud source
# * prob - each voxel has a probabilistic filter, i.e. is active if it was occupied most times in the last frames
# * pt1 - each voxel has a pt1 filter, i.e. is active if (f*actualframe+(1-f)*previousframe > 0.5)
#post_filter = "prob"

  [FilteredVideoSource.downsample]
  # Size in meters for the "downsample" pre-filter
  cube_size = 0.01

  # The following list of filters is optional
  # The order of the filters themselves IS NOT SIGNIFICANT.
  # each filter requires a "type" and may need additional options

  [[FilteredVideoSource.filters]]
  # Calibration filters. Sets the calibration parameters of the used camera
  type = "SensorCalibrationFilter" # Makes a linear correction of the sensor's z value
  a = 1.0117
  b = -0.0100851

  [[FilteredVideoSource.filters]]
  # The background filter erases all points far away from the camera (below z=threshold in the camera coordinate system).
  # This is used to remove points that are noisy anyway and simplify further processing
  type = "BackgroundFilter"
  # Unit in meters
  threshold = 2.8

  [[FilteredVideoSource.filters]]
  # The RobotOdoTransformer transforms coordinates from the local coordinate
  # sytem to the global one referenced in Lola's right foot sole
  # Requirements: PoseService
  type = "RobotOdoTransformer"

  [[FilteredVideoSource.filters]]
  # The crop filter erases all points out of an xy rectangle with the given boundaries respect to world's origin.
  # This is used to ignore everything outside of the experimental area
  type = "CropFilter"
  # Unit in meters
  xmax = 2.5
  xmin = -1.0
  ymax = 1.0
  ymin = -1.0

###########################################################################
# Observers is an array
# this will list all observers and options belonging to them

# This helps calibrating the camera
# It requires a corresponding visualizer, as well as an obstacle detector
[[observers]]
type = "CameraCalibrator"

# This defines all available visualizers, there can be more than one
[[observers]]
type = "ARVisualizer"

# Every instance has 4 mandatory options:
# - type: the type of the visualizer
# - name: its name
# - width
# and
# - height: the window dimensions

  # This visualizer belongs to the CameraCalibrator. It shows the calibartion parameters
  [[observers.visualizer]]
  type = "CameraCalibrator"
  name = "Camera Calibration"
  width = 1024
  height = 768
  show_obstacles = true


# This enables the obstacle detector
[[observers]]
type = "ObstacleDetector"
# Available methods accepted by ObstacleDetector:
#   - "EuclideanClustering"
#   - "GMM" (see below)
method = "EuclideanClustering"

[ObstacleDetetction.Euclidean.SplitStrategy]
# Defines the split axis.
# The point cloud is splitted with a plane through the centroid and perpendicular to the chosen axis.
# Values: largest|middle|smallest
split_axis = "middle"

###########################################################################
# Miscellaneous settings

# These settings define basic parameters for detecting the ground plane
# They are mandatory if any kind of surface or obstacle detection is enabled
[BasicSurfaceDetection]
  [BasicSurfaceDetection.RANSAC]
  #max number of ransac iterations
  maxIterations = 200
  # How close a point must be to the model [in meters] in order to be considered an inlier
  distanceThreshold = 0.03
  #How small the left (extracted) pointcloud should be for termination of the plane segmentation
  minFilterPercentage = 0.08

  [BasicSurfaceDetection.Classification]
  # The function to classify segmented planes according to deviation in their normals
  # This step is only for Surface Segmentation
  # The angle values represent how much deviation is allowed
  # Given in degrees.
  deviationAngle = 4.0

  [BasicSurfaceDetection.Downsampling]
  #Voxel grid for reducing the number of points before passing them to the clustering step.
  coarseVoxelSize_X = 0.01
  coarseVoxelSize_Y = 0.01
  coarseVoxelSize_Z = 0.01
  fineVoxelSize_X = 0.007
  fineVoxelSize_Y = 0.007
  fineVoxelSize_Z = 0.007
  coarseFineLimit = 11000

  [BasicSurfaceDetection.Clustering]
  #Euclidean clustering to cluster (separate) detected surfaces
  clusterTolerance = 0.05 # distance between clusters, in meters
  minClusterSize = 750 # in number of points

  [BasicSurfaceDetection.SurfaceTracking]
  #How many times an unmaterialized surface should be lost to be completely removed from tracking
  lostLimit = 5
  #How many consecutive times a surface should be detected to be materialized
  foundLimit = 5
  # Allowed deviation for the position of the center point of a surface at the matching for identification
  maxCenterDistance = 0.05
  # Maximum deviation percentage of surface radius such that surfaces can still be mapped to each other
  maxRadiusDeviationPercentage = 0.5

  [BasicSurfaceDetection.ConvexHullApproximation]
  #ConvexHull Method for surface point reduction
  #The number of vertice points of a surface, that is sent to the robot and to the visualizer
  numHullPoints = 8
  # When a new convex hull is merged with an old convex hull, all points of the new convex hull are
  # moved mergeUpdatePercentage percent along the vector pointing to the closest boundary point of
  # the old convex hull. All points of the old convex hull are moved 1-mergeUpdatePercentage percent
  # along the vector pointing to the closest boundary point of the new convex hull.
  mergeUpdatePercentage = 0.2

# These settings define basic parameters for detecting obstacles
# They are mandatory if any kind of bstacle detection is enabled
[BasicObstacleDetection]
  [BasicObstacleDetection.InlierFinder]
  # minimum distance a point must have to its projection onto a
  # plane in order to be considered an inlier on this plane
  minDistToPlane = 0.04
