# This is the master config. It is most likely not runnable but lists all 
# available options

# All IPs and ports given in here are the defaults for a lab setup.

# Mandatory options are given, optional options are commented out
# and listed with the default values 

# This defines the pose service to use.
# Requirements: None
[PoseService]
ip = "192.168.0.8"
port = 53249        # default value is hexadecimal 0xd001

# This defines the specifics for the robot
# Requirements: PoseService
[Robot]
# The size of the "bubble" in which no modifications or deletions of objects
# are sent to the robot. **In meters**
# This is required because the camera angle prevents the robot from seeing
# the environment directly below its feet  
bubble_size = 1.2

# Video source 
[VideoSource]
# Common options:
#   - `type`: stream, oni, pcd, am_offline
# `oni` and `pcd` types require an additional parameter: file_path
# `am_offline` type requires an additional parameters: dir_path
type = "stream"
#file_path = "path/to/file"
#dir_path = "path/to/folder"
#enable_rgb = false  # Capture RGB images

# This sets up the filtered source, which will be passed to all
# steps requiring a video 
[FilteredVideoSource]
# TODO: describe options
# options: "simple", "prob", "pt1"
type = "simple"

  # The following list of filters is optional
  # The order of the filters themselves IS NOT SIGNIFICANT.
  # each filter requires a "type" and may need additional options

  [[FilteredVideoSource.filters]]
  # Calibration filters. Sets the calibration parameters of the used camera
  type = "SensorCalibrationFilter"
  a = 1.0117
  b = -0.0100851

  [[FilteredVideoSource.filters]]
  # The RobotOdoTransformer transforms coordinates from the local coordinate
  # sytem to the global one referenced in Lola's right foot sole
  # Requirements: PoseService
  type = "RobotOdoTransformer"

  [[FilteredVideoSource.filters]]
  # TODO: What's that?
  type = "FileOdoTransformer"
  file_path = "some/path"
  
  [[FilteredVideoSource.filters]]
  # This filter truncates all values to the specified amount of digits
  # after the dot.
  type = "TruncateFilter"
  # Base unit is meters, so 2 truncates to millimeters
  decimal_points = 2

  [[FilteredVideoSource.filters]]
  # The crop filter erases all points out of the given boundaries.
  # This is used to ignore everything outside of the experimental area 
  type = "CropFilter"
  # Unit in meters
  xmax = 4
  xmin = -1.5
  ymax = 1.5
  ymin = -1.5

###########################################################################
# Observers is an array
# this will list all observers and options belonging to them

# This observer saves the input data. The saved data can be replayed later
# with the "am_offline" video source
[[observers]]
type = "Recorder"

  [ObserverOptions.Recorder]
  # Output directory. The final output will end up in a subfolder named
  # "rec_{datetime}" 
  output_folder= "recordings"
  # Defines which data to record
  #cloud = true
  #rgb = false
  #pose = false

# This helps to calibrate the camera
# It requires a corresponding visualizer  
[[observers]]
type = "CameraCalibrator"

# This defines all available visualizers, there can be more than one
[[observers]]
type = "ARVisualizer"

# Every instance has 4 mandatory options:
# - type: the type of the visualizer
# - name: its name
# - width
# and 
# - height: the window dimensions

  # This visualizer belongs to the CameraCalibrator. It shows the calibartion parameters
  [[observers.visualizer]]
  type = "CameraCalibrator"
  name = "Camera Calibration"
  width = 1024
  height = 768


###########################################################################
# Aggregators is an array
# this will list all aggregators and options belonging to them

# This aggregator sends data to listeners (Path planning, Lab Visualizer, ...) 
[[aggregators]]
type = "RobotAggregator"
# Number of frames to wait before sending new data
update_frequency = 3
# Data to send
data = [ "obstacles", "surfaces", "images", "pointclouds"]
# Human readable target name
target="Vision"
# Target IP
ip = "192.168.0.3"  # QNX computer IP
# Target Port, default is hexadecimal 0xF008
port = 61448
# Delay to wait after sending a message
#delay = 10